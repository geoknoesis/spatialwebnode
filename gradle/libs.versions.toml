[versions]
# Kotlin and KotlinX
kotlin = "2.1.20"
kotlinx-coroutines = "1.8.1"
kotlinx-serialization = "1.6.3"

# Java and JVM
java = "17"

# Build and Development
gradle = "8.14"

# Logging
slf4j = "2.0.9"
logback = "1.4.14"

# Testing
junit-jupiter = "5.10.1"
mockito = "5.8.0"
mockito-kotlin = "5.2.1"
kotlin-test = "2.1.20"

# JSON and YAML
jackson = "2.16.0"
snakeyaml = "2.2"

# HTTP and Web
ktor = "3.2.2"

# MQTT
paho-mqtt = "1.2.5"
hivemq-mqtt = "1.3.0"

# DID and Identity
waltid-did = "0.14.0"

# Dependency Injection
koin = "3.5.3"

# P2P (commented out for future use)
# libp2p = "0.9.0"
# jvm-libp2p = "0.2.0"

# GraalVM Native Image
graalvm = "0.9.28"
rdf4j = "4.3.4"

[libraries]
# Kotlin
kotlin-stdlib = { module = "org.jetbrains.kotlin:kotlin-stdlib", version.ref = "kotlin" }
kotlin-stdlib-jdk8 = { module = "org.jetbrains.kotlin:kotlin-stdlib-jdk8" }
kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin" }

# KotlinX
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlinx-coroutines" }
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinx-serialization" }
kotlinx-serialization-yaml = { module = "org.jetbrains.kotlinx:kotlinx-serialization-yaml", version.ref = "kotlinx-serialization" }

# Logging
slf4j-api = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }
logback-classic = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }

# Testing
junit-jupiter = { module = "org.junit.jupiter:junit-jupiter", version.ref = "junit-jupiter" }
junit-jupiter-api = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "junit-jupiter" }
junit-jupiter-engine = { module = "org.junit.jupiter:junit-jupiter-engine", version.ref = "junit-jupiter" }
kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin-test" }
kotlin-test-junit5 = { module = "org.jetbrains.kotlin:kotlin-test-junit5", version.ref = "kotlin-test" }
mockito-core = { module = "org.mockito:mockito-core", version.ref = "mockito" }
mockito-junit-jupiter = { module = "org.mockito:mockito-junit-jupiter", version.ref = "mockito" }
mockito-kotlin = { module = "org.mockito.kotlin:mockito-kotlin", version.ref = "mockito-kotlin" }

# JSON and YAML
jackson-core = { module = "com.fasterxml.jackson.core:jackson-core", version.ref = "jackson" }
jackson-databind = { module = "com.fasterxml.jackson.core:jackson-databind", version.ref = "jackson" }
jackson-dataformat-yaml = { module = "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml", version.ref = "jackson" }
jackson-module-kotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "jackson" }
snakeyaml = { module = "org.yaml:snakeyaml", version.ref = "snakeyaml" }

# HTTP and Web
ktor-client-cio = { module = "io.ktor:ktor-client-cio", version.ref = "ktor" }
ktor-client-websockets = { module = "io.ktor:ktor-client-websockets", version.ref = "ktor" }
ktor-client-content-negotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-serialization-kotlinx-json = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktor-serialization-kotlinx-yaml = { module = "io.ktor:ktor-serialization-kotlinx-yaml", version.ref = "ktor" }

# MQTT
paho-mqtt-client = { module = "org.eclipse.paho:org.eclipse.paho.client.mqttv3", version.ref = "paho-mqtt" }
hivemq-mqtt-client = { module = "com.hivemq:hivemq-mqtt-client", version.ref = "hivemq-mqtt" }

# DID and Identity
waltid-did = { module = "id.walt.did:waltid-did", version.ref = "waltid-did" }

# Dependency Injection
koin-core = { module = "io.insert-koin:koin-core", version.ref = "koin" }
koin-test = { module = "io.insert-koin:koin-test", version.ref = "koin" }

# P2P (commented out for future use)
# libp2p = { module = "io.libp2p:libp2p", version.ref = "libp2p" }
# libp2p-core = { module = "io.libp2p:libp2p-core", version.ref = "libp2p" }
# libp2p-host = { module = "io.libp2p:libp2p-host", version.ref = "libp2p" }
# libp2p-transport = { module = "io.libp2p:libp2p-transport", version.ref = "libp2p" }
# libp2p-muxer = { module = "io.libp2p:libp2p-muxer", version.ref = "libp2p" }
# libp2p-crypto = { module = "io.libp2p:libp2p-crypto", version.ref = "libp2p" }
# libp2p-peerstore = { module = "io.libp2p:libp2p-peerstore", version.ref = "libp2p" }
# libp2p-discovery = { module = "io.libp2p:libp2p-discovery", version.ref = "libp2p" }
# libp2p-pubsub = { module = "io.libp2p:libp2p-pubsub", version.ref = "libp2p" }
# libp2p-ping = { module = "io.libp2p:libp2p-ping", version.ref = "libp2p" }
# jvm-libp2p = { module = "com.github.multiformats:jvm-libp2p", version.ref = "jvm-libp2p" }

# RDF4J
rdf4j-repository-api = { module = "org.eclipse.rdf4j:rdf4j-repository-api", version.ref = "rdf4j" }
rdf4j-repository-sparql = { module = "org.eclipse.rdf4j:rdf4j-repository-sparql", version.ref = "rdf4j" }
rdf4j-repository-http = { module = "org.eclipse.rdf4j:rdf4j-repository-http", version.ref = "rdf4j" }
rdf4j-query = { module = "org.eclipse.rdf4j:rdf4j-query", version.ref = "rdf4j" }
rdf4j-queryparser-sparql = { module = "org.eclipse.rdf4j:rdf4j-queryparser-sparql", version.ref = "rdf4j" }
rdf4j-rio-turtle = { module = "org.eclipse.rdf4j:rdf4j-rio-turtle", version.ref = "rdf4j" }
rdf4j-rio-rdfxml = { module = "org.eclipse.rdf4j:rdf4j-rio-rdfxml", version.ref = "rdf4j" }
rdf4j-rio-jsonld = { module = "org.eclipse.rdf4j:rdf4j-rio-jsonld", version.ref = "rdf4j" }

[plugins]
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
native = { id = "org.graalvm.buildtools.native", version.ref = "graalvm" }

[bundles]
# Common dependencies used across modules
kotlin-common = [
    "kotlin-stdlib-jdk8",
    "kotlinx-coroutines-core",
    "kotlinx-serialization-json"
]

logging = [
    "slf4j-api",
    "logback-classic"
]

testing = [
    "junit-jupiter",
    "kotlin-test-junit5",
    "mockito-core",
    "mockito-kotlin"
]

jackson = [
    "jackson-databind",
    "jackson-dataformat-yaml",
    "jackson-module-kotlin"
]

ktor-client = [
    "ktor-client-cio",
    "ktor-client-websockets",
    "ktor-client-content-negotiation",
    "ktor-serialization-kotlinx-json"
] 